// Auto-generated by scripts/generate-cms-client.mjs. Do not edit manually.

export interface CmsClientOptions {
  baseUrl?: string;
  token?: string;
  getAccessToken?: () => string | undefined;
  defaultHeaders?: Record<string, string>;
}

export interface CmsClient {
  listProducts(query?: ListProductsQuery, requestInit?: RequestInit): Promise<Product[]>;
  getProduct(id: string, requestInit?: RequestInit): Promise<Product>;
  listCategories(requestInit?: RequestInit): Promise<Category[]>;
  listPages(requestInit?: RequestInit): Promise<Page[]>;
  getPage(id: string, requestInit?: RequestInit): Promise<Page>;
  listBlocks(query?: ListBlocksQuery, requestInit?: RequestInit): Promise<PageBlock[]>;
  listMenus(requestInit?: RequestInit): Promise<Menu[]>;
  getMenu(id: string, requestInit?: RequestInit): Promise<Menu>;
}

export function createCmsClient(options?: CmsClientOptions): CmsClient;
export const defaultCmsClient: CmsClient;

export interface ListProductsQuery {
  status?: PublishStatus;
  search?: string;
  skip?: number;
  take?: number;
}

export interface ListBlocksQuery {
  pageId?: string;
}

export type PublishStatus = "DRAFT" | "PUBLISHED" | "ARCHIVED";

export interface Category {
  id: string;
  name: string;
  slug: string;
  description?: string | null;
  status: PublishStatus;
  parentId?: string | null;
  createdAt: string;
  updatedAt: string;
  children?: Category[];
}

export interface MediaAsset {
  id: string;
  kind: string;
  bucket: string;
  key: string;
  url: string;
  altText?: string | null;
  status: PublishStatus;
}

export interface ProductVersion {
  id: string;
  productId: string;
  versionNumber: number;
  title: string;
  summary?: string | null;
  description?: string | null;
  currency: string;
  price: number;
  jsonSpec?: Record<string, any> | null;
  status: PublishStatus;
  createdAt: string;
}

export interface ProductCategoryPivot {
  categoryId: string;
  category: Category;
}

export interface ProductMediaPivot {
  mediaId: string;
  ordering: number;
  isPrimary: boolean;
  media: MediaAsset;
}

export interface SeoMeta {
  id?: string;
  metaTitle?: string | null;
  metaDescription?: string | null;
  metaKeywords?: string | null;
}

export interface Product {
  id: string;
  slug: string;
  status: PublishStatus;
  latestVersion: number;
  publishedVersion?: number | null;
  publishedAt?: string | null;
  createdAt: string;
  updatedAt: string;
  versions: ProductVersion[];
  categories: ProductCategoryPivot[];
  media: ProductMediaPivot[];
  seo?: SeoMeta;
}

export interface PageVersion {
  id: string;
  pageId: string;
  versionNumber: number;
  title: string;
  body?: string | null;
  status: PublishStatus;
}

export interface PageBlock {
  id: string;
  pageId: string;
  code: string;
  type: string;
  content: Record<string, any>;
  status: PublishStatus;
  version: number;
  createdAt: string;
  updatedAt: string;
}

export interface Page {
  id: string;
  slug: string;
  title: string;
  status: PublishStatus;
  latestVersion: number;
  publishedAt?: string | null;
  versions: PageVersion[];
  blocks: PageBlock[];
  seo?: SeoMeta;
}

export interface MenuItem {
  id: string;
  title: string;
  url: string;
  parentId?: string | null;
  sortOrder: number;
  status: PublishStatus;
  children?: MenuItem[];
}

export interface Menu {
  id: string;
  code: string;
  title: string;
  status: PublishStatus;
  items: MenuItem[];
}
